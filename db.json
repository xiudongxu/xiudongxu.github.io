{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522505277079},{"_id":"source/404.html","hash":"d9f86e7c7e186582ba2e264ab6501226d4cd84b3","modified":1522491135212},{"_id":"source/CNAME","hash":"a67cc744cd7f27688f49e7ddc7dda0483eaaf5b4","modified":1522511965720},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1522462718423},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1522462718423},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1522462718423},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1522462718423},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1522462718423},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1522462718423},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1522462718423},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1522462718423},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1522462718423},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1522462718438},{"_id":"themes/next/README.md","hash":"81c51e4b0fe5eaab6becfc0d6ef342bdd749a781","modified":1522462718438},{"_id":"themes/next/bower.json","hash":"b133dd92c7a825745a3b74474c2d738d9fd8ff07","modified":1522462718438},{"_id":"themes/next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1522462718438},{"_id":"themes/next/_config.yml","hash":"3a3b220c88f3b66148cc596958ef837163273ac2","modified":1526909593748},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1522462718438},{"_id":"themes/next/package.json","hash":"77f15fd8e1bf54fe9e04513e38a70823225256cc","modified":1522462718501},{"_id":"source/_posts/2018-03-31-使用hexo搭建自己的博客.md","hash":"9ea9167ad68dd353fb5a7852ed4bc1d2950778ce","modified":1522512120225},{"_id":"source/_posts/2018-07-24- java8流相关Stream.md","hash":"4b53b11b8cd8a851addcf0188993e0a8450c08f7","modified":1532447743033},{"_id":"source/tags/index.md","hash":"35c3f8da6b17707a737799dc0bb7b36789275f6f","modified":1522473061125},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1522462718423},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"476c9bb6616818be9d86567ad4e2e539c0e0da2f","modified":1522462718423},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1522462718423},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1522462718423},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1522462718423},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1522462710422},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1522462718423},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1522462718391},{"_id":"source/categories/index.md","hash":"189bdfd4f11fdb86990e81de48b5aa8593066b77","modified":1522489553915},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1522462718407},{"_id":"themes/next/.git/packed-refs","hash":"cd722fd1f7621bac0ca0aafe8336fe6daff84b03","modified":1522462718391},{"_id":"source/_posts/2018-04-22-生产者消费者.md","hash":"c743eb262bc3133f6cfee6265ec0187c49fd984b","modified":1526908556613},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1522462718438},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1522462718438},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1522462718438},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1522462718438},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1522462718438},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"bbd5aa9a79cac0f630b666bc6db87025e08fb1ac","modified":1522462718438},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1522462718438},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1522462718438},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1522462718438},{"_id":"themes/next/languages/_en.yml","hash":"2397256c752276df666c1ff579902abb367b2380","modified":1522462718438},{"_id":"themes/next/languages/bg.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/ar.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718438},{"_id":"themes/next/languages/cs.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/bn.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/da.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/.git/index","hash":"a42d7faa93f2cacc7a8e25113d09f5ad5eb318ef","modified":1522462718594},{"_id":"source/_posts/2018-05-21-简单的性能优化.md","hash":"293426cbec60e9c85abdc1030ae3c83916c7efbc","modified":1526908658570},{"_id":"themes/next/languages/es.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/el.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/fa.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/et.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/fr.yml","hash":"059d66eea84757a2c330e865262cbf5d22e384ca","modified":1522462718454},{"_id":"themes/next/languages/de.yml","hash":"31022b4e7caa10ad7551919159fb37c820788398","modified":1522462718454},{"_id":"themes/next/languages/fi.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/hr.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/he.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/hu.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/hi.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/id.yml","hash":"6aedba65605a6b63451767f6ac4359c7ca72b4b5","modified":1522462718454},{"_id":"themes/next/languages/ja.yml","hash":"7ff7c14c97291e2e29ad1e10fa96bcab8fe35a18","modified":1522462718454},{"_id":"themes/next/languages/it.yml","hash":"2f183ebc0e26c0ce899e57f1b98b0d1727f8ac06","modified":1522462718454},{"_id":"themes/next/languages/jv.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/lv.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/lt.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/ms.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/ko.yml","hash":"e8f29cb1684262cc7de8807f70f22ce25b68ae4e","modified":1522462718454},{"_id":"themes/next/languages/pa.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/nl.yml","hash":"b9e752c19a2fa8b9b24ab382c903da3fcefb48df","modified":1522462718454},{"_id":"themes/next/languages/pl.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/no.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/pt-BR.yml","hash":"08a9d21e2ed1c7871ad2e4c14f57cd5d21fecb20","modified":1522462718454},{"_id":"themes/next/languages/ru.yml","hash":"a4851c599ed8bb2c5d374248977e8484d009ceb7","modified":1522462718454},{"_id":"themes/next/languages/ro.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/pt.yml","hash":"bc1e2b1857b3dbf15632950bd3c06971b9eb7b17","modified":1522462718454},{"_id":"themes/next/languages/sl.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/sv.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/vi.yml","hash":"946a5cf34dd0595cd5a4f41706dfb742264f4a27","modified":1522462718454},{"_id":"themes/next/languages/uk.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/zh-CN.yml","hash":"9d63a4174c3ef6f0ef4f865845bf35c9144b23d8","modified":1522505080047},{"_id":"themes/next/languages/sr.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/zh-HK.yml","hash":"f01e0b5619cc179bc27016cc284e5a7220b5711c","modified":1522462718469},{"_id":"themes/next/languages/zh-TW.yml","hash":"786883db049ed0d74acd5a3be62108d51a8927af","modified":1522462718469},{"_id":"themes/next/languages/th.yml","hash":"371331112a7ec4a61991cb12870ca85b7856b43d","modified":1522462718454},{"_id":"themes/next/languages/tr.yml","hash":"65b9d8ef239de9d449ff47ed9ba543d2b7665885","modified":1522462718454},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1522462718501},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1522462718501},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1522462718501},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1522462718501},{"_id":"themes/next/layout/page.swig","hash":"3f9b2444f12251727ebbc28159f02e9e9489742e","modified":1522462718501},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1522462718501},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1522462718501},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1522462718501},{"_id":"themes/next/layout/_layout.swig","hash":"340da1866d64d0103da6f18652171b209f8d192b","modified":1522508181548},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1522462718501},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1522462718594},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718563},{"_id":"themes/next/.git/logs/HEAD","hash":"c1419913a13eebead83a44d8107ff0cb6c559a06","modified":1522462718391},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1522462710437},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1522462710422},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1522462710437},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1522462710437},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1522462710437},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1522462710437},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1522462710437},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1522462710437},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1522462710437},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1522462718594},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1522462710437},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1522462710422},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1522462718438},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1522462718438},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1522462718438},{"_id":"themes/next/docs/ru/README.md","hash":"fd2ee8e3f5afed406f11f24b13e3174dd0d40611","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"98ef4dc1a7a12320211ffb36d264cd86ffcce0dd","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0bc0c3eb909f137c859f38c5c66dcb7c29f76ead","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c561c6e3ce4d0941d60d1217c597b19eb00095ff","modified":1522462718438},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1522462718438},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522462718469},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1522462718469},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522462718469},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"92a82d2a98f31c971c71d0bb26a4798b3129869e","modified":1522504145598},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"06b3f36efc348ee28af2d9a611f7237898dfd08b","modified":1522494129783},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1522462718469},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1522462718469},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1522462718469},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"355ddd5b8af696f7bffb183addd7e84c0a4e2123","modified":1522462718469},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1522462718469},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1522462718469},{"_id":"themes/next/layout/_partials/footer.swig","hash":"866cf56710bc230c35b06093c6542348880eb768","modified":1526910739863},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"464082e431ea5b06df782d5f312ee25be9e5f169","modified":1522462718469},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1522462718469},{"_id":"themes/next/layout/_partials/header.swig","hash":"0cadcd3d598535d077700b8c43a7543a3bdb8d5c","modified":1522509757410},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1522462718469},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1522462718469},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1522462718469},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1522462718485},{"_id":"themes/next/layout/_partials/sub-menu.swig","hash":"9783a9569fe8344ed287013156e52ca1b0a25544","modified":1522462718469},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1522462718594},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1522462718485},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1522462718485},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1522462718485},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1522462718501},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1522462718501},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1522462718485},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1522462718501},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1522462718501},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1522462718501},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1522462718501},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1522462718501},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1522462718501},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1522462718501},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1522462718501},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1522462718501},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1522462718501},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1522462718501},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1522462718516},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1522462718516},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1522462718516},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1522462718516},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1522462718563},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1522462718563},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522462718563},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522462718563},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1522462718563},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1522462718563},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1522462718563},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1522462718563},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1522462718563},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522462718579},{"_id":"themes/next/layout/_macro/post.swig","hash":"bbc5c517e68f8ab53faa64d214192cc7933fdc14","modified":1522505400458},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522462718579},{"_id":"themes/next/source/images/favicon.ico","hash":"abcd2861910841e2f50ef691812ebd228000d70a","modified":1522505363671},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1522462718579},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522462718579},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522462718579},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1522462718579},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522462718579},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1522462718579},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718485},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718485},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718547},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718547},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718547},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718563},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522462718563},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1522462718579},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1522462718579},{"_id":"themes/next/.git/refs/heads/master","hash":"9e32a86ca12c881904d0eb1e09a8af41c09cad31","modified":1522462718391},{"_id":"themes/next/layout/_macro/menu/menu-badge-1.swig","hash":"7ffc5c159ab566805ceda6b8c7a4149a7e296116","modified":1522462718469},{"_id":"themes/next/layout/_macro/menu/menu-badge-2.swig","hash":"7b96a0e6079e845573338523cea4437817a4b1e1","modified":1522462718469},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"6a04cd1ef9ebac103d86b61505fa9b0f26268fdc","modified":1522462718469},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1522462718469},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"9f7aa33a620aea6ede1fb907b61fd071c018c525","modified":1522462718469},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1522462718469},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1522462718469},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1522462718469},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1522462718469},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1522462718469},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1522462718469},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1522462718469},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1522462718469},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522462718485},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1522462718485},{"_id":"themes/next/source/images/avatar.jpg","hash":"7a1a9f9def7a56b0022478f2bca23f4de49296ad","modified":1522464878572},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1522462718485},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1522462718485},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1522462718485},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1522462718485},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1522462718485},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1522462718485},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1522462718485},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1522462718501},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1522462718485},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1522462718501},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1522462718501},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1522462718501},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1522462718501},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1522462718501},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1522462718501},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9afb5a28a9a3e8653ba4ce160fcb8409b8feca43","modified":1522507556853},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1522462718547},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1522462718547},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1522462718547},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1522462718501},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1522462718563},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1522462718501},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1522462718563},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1522462718485},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1522462718563},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1522506894515},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1522462718579},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1522462718579},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1522462718579},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1522462718579},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1522462718579},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1522462718579},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1522462718579},{"_id":"themes/next/source/js/src/love.js","hash":"6583037545c7edc355f76f29b3393e250b150032","modified":1522501022659},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1522462718579},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1522462718579},{"_id":"themes/next/source/js/src/utils.js","hash":"9543f124adba1f6e3c93d61f85e3e6f74ed5fff4","modified":1522462718579},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1522462718579},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1522462718579},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1522462718579},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1522462718579},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1522462718579},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1522462718594},{"_id":"themes/next/.git/objects/pack/pack-53a4cb8ca3e9cadcf85ed648ac1699da8fd526f8.idx","hash":"1795b47b6de29b3563decf68de6e7c40ced9628c","modified":1522462718185},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c1419913a13eebead83a44d8107ff0cb6c559a06","modified":1522462718407},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1522462718391},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1522462718594},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1522462718594},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1522462718501},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1522462718516},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1522462718501},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1522462718532},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1522462718547},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1522462718547},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1522462718547},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1522462718547},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1522462718547},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1522462718547},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"a863f2c8bae1fbccdc181a5d178b808cd80c5b5e","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1522462718547},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1522462718579},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1522462718579},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1522462718579},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1522462718594},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1522462718594},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1522462718579},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1522462718594},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522462718594},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522462718594},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c1419913a13eebead83a44d8107ff0cb6c559a06","modified":1522462718391},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1522462718594},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1522462718516},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"d5ce2f3c7b3ca46d37f51189f992bedbe34d0eba","modified":1522502502610},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"0b57ca04dc3998cf70bb90d777b0db05f3928b82","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1522462718532},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1522462718547},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522462718563},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522462718563},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522462718594},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1522462718547},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"70d7bd7cf6f2f608967b9bb30e94e242f034e736","modified":1522502767540},{"_id":"themes/next/.git/objects/pack/pack-53a4cb8ca3e9cadcf85ed648ac1699da8fd526f8.pack","hash":"c070f8569370d2066741dd086b9b41409a8fb3c4","modified":1522462718232}],"Category":[{"name":"生活点滴","_id":"cjy4ev73u000560nbcpism7k6"},{"name":"JAVA学习","_id":"cjy4ev74a000860nbkyczda83"},{"name":"架构相关","_id":"cjy4ev75k000j60nbj1l9zk29"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"robots\" content=\"all\" />\n<meta name=\"robots\" content=\"index,follow\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\ncharset=\"utf-8\" homePageUrl=\"/\"\nhomePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"robots\" content=\"all\" />\n<meta name=\"robots\" content=\"index,follow\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\ncharset=\"utf-8\" homePageUrl=\"/\"\nhomePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2018-03-31T10:12:15.212Z","updated":"2018-03-31T10:12:15.212Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjy4ev70d000060nbcdvfu1kb","content":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"robots\" content=\"all\">\n<meta name=\"robots\" content=\"index,follow\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"robots\" content=\"all\">\n<meta name=\"robots\" content=\"index,follow\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"分类","date":"2018-03-31T05:40:30.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-03-31 13:40:30\ntype: \"categories\"\n---\n","updated":"2018-03-31T09:45:53.915Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjy4ev73u000260nb5peb23hc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-03-31T04:23:35.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-31 12:23:35\ntype: \"tags\"\n---\n\n","updated":"2018-03-31T05:11:01.125Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjy4ev73u000460nblwh2cjqt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"使用Hexo搭建自己的博客","date":"2018-03-31T10:29:37.000Z","copyright":false,"_content":"\n### 万事都有因\n\n想要搭建博客已经有很长时间了，虽然我觉得码字是件很麻烦的事情，但是很多前辈又说过，经常记录对自己的成长是有帮助的。所以万事开头难，一切慢慢练习，好好坚持。希望这是一个长期而且有意义的事情。\n\n女票现在经常写点评，而且有的点评阅读量在几万以上，这么多阅读量我是很震惊的，她一般都是长文，字很多，图为并茂的那种，基本是每个菜品配图，配评论，然后总结一下服务、环境、价格、推荐指数等等。这样细致的点评也难怪经常被人点赞，经常被商家点赞。所以我要学习这种经常点评，总结的精神，就从现在开始吧。\n\n### 因->果\n\n自从上一次搭建自己的博客是在17年的国庆假期，当时使用的是[Jekyll](https://www.jekyll.com.cn/),后来因为要调整的东西太多啦，就中途废止了。这次使用[Hexo](https://hexo.io/zh-cn/)搭建了博客，感觉后者操作还是比较方便的，选用的主题也是自己比较中意的[NexT](https://github.com/theme-next/hexo-theme-next)。当然创建过程还算比较顺利的原因是得益于参考了很多先人的博客，多亏这个[博客](https://blog.csdn.net/fanxiaobin577328725/article/details/79209685)为我铺平道路，抱拳感谢~\n\n修改样式变得酷炫参考了这个[博客](https://blog.csdn.net/qq_33699981/article/details/72716951)，这位大神讲解的很细致，但是有几个点是不起效果的，而且因为我的版本是6.0.1 所以有些操作是不同的。 当然，经过仔细研究还是能解决的，毕竟也是研究代码的人，这个模板的套路摸清了就好搞啦~  需要有点耐心奥。\n\n搞了一晚上的样式，，有些已经实现，但是还有些不太完美，只能后续再进行了。\n\n**TODO List:**\n\n- [在线沟通](http://www.daovoice.io/)    邀请码：0f81ff2f\n- [Travis CI 自动发布](https://travis-ci.org/)  参考链接：[传送门](http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/)\n- 友情链接、图片文章 参考链接：[传送门](https://www.jianshu.com/p/5d5931289c09)\n\n\n\n**附加今日发现的好玩的网站：**\n\n- [easyicon](http://www.easyicon.net/) ：一个图标网站。\n- [JiaThis](http://www.jiathis.com/) ：一个可以嵌入分享、评论、推荐按钮的功能的网站。\n- [iissnan](http://notes.iissnan.com/) ：NexT作者的博客\n","source":"_posts/2018-03-31-使用hexo搭建自己的博客.md","raw":"---\ntitle: 使用Hexo搭建自己的博客\ndate: 2018-03-31 18:29:37\ntags: 个人记录\ncategories: 生活点滴\ncopyright: false\n---\n\n### 万事都有因\n\n想要搭建博客已经有很长时间了，虽然我觉得码字是件很麻烦的事情，但是很多前辈又说过，经常记录对自己的成长是有帮助的。所以万事开头难，一切慢慢练习，好好坚持。希望这是一个长期而且有意义的事情。\n\n女票现在经常写点评，而且有的点评阅读量在几万以上，这么多阅读量我是很震惊的，她一般都是长文，字很多，图为并茂的那种，基本是每个菜品配图，配评论，然后总结一下服务、环境、价格、推荐指数等等。这样细致的点评也难怪经常被人点赞，经常被商家点赞。所以我要学习这种经常点评，总结的精神，就从现在开始吧。\n\n### 因->果\n\n自从上一次搭建自己的博客是在17年的国庆假期，当时使用的是[Jekyll](https://www.jekyll.com.cn/),后来因为要调整的东西太多啦，就中途废止了。这次使用[Hexo](https://hexo.io/zh-cn/)搭建了博客，感觉后者操作还是比较方便的，选用的主题也是自己比较中意的[NexT](https://github.com/theme-next/hexo-theme-next)。当然创建过程还算比较顺利的原因是得益于参考了很多先人的博客，多亏这个[博客](https://blog.csdn.net/fanxiaobin577328725/article/details/79209685)为我铺平道路，抱拳感谢~\n\n修改样式变得酷炫参考了这个[博客](https://blog.csdn.net/qq_33699981/article/details/72716951)，这位大神讲解的很细致，但是有几个点是不起效果的，而且因为我的版本是6.0.1 所以有些操作是不同的。 当然，经过仔细研究还是能解决的，毕竟也是研究代码的人，这个模板的套路摸清了就好搞啦~  需要有点耐心奥。\n\n搞了一晚上的样式，，有些已经实现，但是还有些不太完美，只能后续再进行了。\n\n**TODO List:**\n\n- [在线沟通](http://www.daovoice.io/)    邀请码：0f81ff2f\n- [Travis CI 自动发布](https://travis-ci.org/)  参考链接：[传送门](http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/)\n- 友情链接、图片文章 参考链接：[传送门](https://www.jianshu.com/p/5d5931289c09)\n\n\n\n**附加今日发现的好玩的网站：**\n\n- [easyicon](http://www.easyicon.net/) ：一个图标网站。\n- [JiaThis](http://www.jiathis.com/) ：一个可以嵌入分享、评论、推荐按钮的功能的网站。\n- [iissnan](http://notes.iissnan.com/) ：NexT作者的博客\n","slug":"使用hexo搭建自己的博客","published":1,"updated":"2018-03-31T16:02:00.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4ev73e000160nb6ycrby8z","content":"<h3 id=\"万事都有因\"><a href=\"#万事都有因\" class=\"headerlink\" title=\"万事都有因\"></a>万事都有因</h3><p>想要搭建博客已经有很长时间了，虽然我觉得码字是件很麻烦的事情，但是很多前辈又说过，经常记录对自己的成长是有帮助的。所以万事开头难，一切慢慢练习，好好坚持。希望这是一个长期而且有意义的事情。</p>\n<p>女票现在经常写点评，而且有的点评阅读量在几万以上，这么多阅读量我是很震惊的，她一般都是长文，字很多，图为并茂的那种，基本是每个菜品配图，配评论，然后总结一下服务、环境、价格、推荐指数等等。这样细致的点评也难怪经常被人点赞，经常被商家点赞。所以我要学习这种经常点评，总结的精神，就从现在开始吧。</p>\n<h3 id=\"因-gt-果\"><a href=\"#因-gt-果\" class=\"headerlink\" title=\"因-&gt;果\"></a>因-&gt;果</h3><p>自从上一次搭建自己的博客是在17年的国庆假期，当时使用的是<a href=\"https://www.jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll</a>,后来因为要调整的东西太多啦，就中途废止了。这次使用<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a>搭建了博客，感觉后者操作还是比较方便的，选用的主题也是自己比较中意的<a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a>。当然创建过程还算比较顺利的原因是得益于参考了很多先人的博客，多亏这个<a href=\"https://blog.csdn.net/fanxiaobin577328725/article/details/79209685\" target=\"_blank\" rel=\"noopener\">博客</a>为我铺平道路，抱拳感谢~</p>\n<p>修改样式变得酷炫参考了这个<a href=\"https://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"noopener\">博客</a>，这位大神讲解的很细致，但是有几个点是不起效果的，而且因为我的版本是6.0.1 所以有些操作是不同的。 当然，经过仔细研究还是能解决的，毕竟也是研究代码的人，这个模板的套路摸清了就好搞啦~  需要有点耐心奥。</p>\n<p>搞了一晚上的样式，，有些已经实现，但是还有些不太完美，只能后续再进行了。</p>\n<p><strong>TODO List:</strong></p>\n<ul>\n<li><a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">在线沟通</a>    邀请码：0f81ff2f</li>\n<li><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI 自动发布</a>  参考链接：<a href=\"http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n<li>友情链接、图片文章 参考链接：<a href=\"https://www.jianshu.com/p/5d5931289c09\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n</ul>\n<p><strong>附加今日发现的好玩的网站：</strong></p>\n<ul>\n<li><a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">easyicon</a> ：一个图标网站。</li>\n<li><a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"noopener\">JiaThis</a> ：一个可以嵌入分享、评论、推荐按钮的功能的网站。</li>\n<li><a href=\"http://notes.iissnan.com/\" target=\"_blank\" rel=\"noopener\">iissnan</a> ：NexT作者的博客</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"万事都有因\"><a href=\"#万事都有因\" class=\"headerlink\" title=\"万事都有因\"></a>万事都有因</h3><p>想要搭建博客已经有很长时间了，虽然我觉得码字是件很麻烦的事情，但是很多前辈又说过，经常记录对自己的成长是有帮助的。所以万事开头难，一切慢慢练习，好好坚持。希望这是一个长期而且有意义的事情。</p>\n<p>女票现在经常写点评，而且有的点评阅读量在几万以上，这么多阅读量我是很震惊的，她一般都是长文，字很多，图为并茂的那种，基本是每个菜品配图，配评论，然后总结一下服务、环境、价格、推荐指数等等。这样细致的点评也难怪经常被人点赞，经常被商家点赞。所以我要学习这种经常点评，总结的精神，就从现在开始吧。</p>\n<h3 id=\"因-gt-果\"><a href=\"#因-gt-果\" class=\"headerlink\" title=\"因-&gt;果\"></a>因-&gt;果</h3><p>自从上一次搭建自己的博客是在17年的国庆假期，当时使用的是<a href=\"https://www.jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll</a>,后来因为要调整的东西太多啦，就中途废止了。这次使用<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a>搭建了博客，感觉后者操作还是比较方便的，选用的主题也是自己比较中意的<a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a>。当然创建过程还算比较顺利的原因是得益于参考了很多先人的博客，多亏这个<a href=\"https://blog.csdn.net/fanxiaobin577328725/article/details/79209685\" target=\"_blank\" rel=\"noopener\">博客</a>为我铺平道路，抱拳感谢~</p>\n<p>修改样式变得酷炫参考了这个<a href=\"https://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"noopener\">博客</a>，这位大神讲解的很细致，但是有几个点是不起效果的，而且因为我的版本是6.0.1 所以有些操作是不同的。 当然，经过仔细研究还是能解决的，毕竟也是研究代码的人，这个模板的套路摸清了就好搞啦~  需要有点耐心奥。</p>\n<p>搞了一晚上的样式，，有些已经实现，但是还有些不太完美，只能后续再进行了。</p>\n<p><strong>TODO List:</strong></p>\n<ul>\n<li><a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">在线沟通</a>    邀请码：0f81ff2f</li>\n<li><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI 自动发布</a>  参考链接：<a href=\"http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n<li>友情链接、图片文章 参考链接：<a href=\"https://www.jianshu.com/p/5d5931289c09\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n</ul>\n<p><strong>附加今日发现的好玩的网站：</strong></p>\n<ul>\n<li><a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">easyicon</a> ：一个图标网站。</li>\n<li><a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"noopener\">JiaThis</a> ：一个可以嵌入分享、评论、推荐按钮的功能的网站。</li>\n<li><a href=\"http://notes.iissnan.com/\" target=\"_blank\" rel=\"noopener\">iissnan</a> ：NexT作者的博客</li>\n</ul>\n"},{"title":"java8流相关Stream","date":"2018-07-24T15:46:58.000Z","_content":"\n最近去了新公司，发现里面的循环什么的基本都是用stream来写的。就是java8那个流，感觉这种写法优雅，易懂，非常方便，所以在此学习并且记录下来。希望对Stream有一个大体上的认识。\n\n<!-- more --> \n\n简介:\n一个宏观上的介绍：流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。\n元素流在管道中经过中间操作(intermediate operation)的处理，最后由最终操作(terminal operation)得到前面处理的结果。\n\n流管道示意图:\n![流管道示意图](http://pcatcseys.bkt.clouddn.com/18-7-23/75871215.jpg)\n> 流的操作分为两种：\n> 中间操作方法：像filter这种，返回流对象本身，最终不产生新集合的方法。\n> 最终操作方法：像count这种最终会从stream产生值的方法。\n\n两个基础特性：\n- **Pipelining** ：中间操作都会返回流对象本身。这样多个操作可以串联成一个管道，如同流式风格。这样可以对操作进行优化，比如延迟执行和短路。\n- **内部迭代** ：以前对集合的遍历都是通过Iterator或者For-each的方式，显示的在集合外部进行迭代，这叫做外部迭代，Stream提供了内部迭代的方式，通过访问者模式实现。\n\n为什么不在集合类实现这些操作，而是定义了全新的Stream API？Oracle官方给出了几个重要原因：\n一是集合类持有的所有元素都是存储在内存中的，非常巨大的集合类会占用大量的内存，而Stream的元素却是在访问的时候才被计算出来，这种“延迟计算”的特性有点类似Clojure的lazy-seq，占用内存很少。\n二是集合类的迭代逻辑是调用者负责，通常是for循环，而Stream的迭代是隐含在对Stream的各种操作中，例如map()。\n\n#### 一、创建Stream\n\n**数据源**\n流的来源。可以是集合，数组，I/O channel，产生器generator等。(Map不能作为Stream的源)\n\n```java\n// 1.Individual values\nStream<String> s = Stream.of(\"a\", \"b\", \"c\");\n// 2. Arrays\nString [] strArray = new String[] {\"a\", \"b\", \"c\"};\nStream<String> arrs = Stream.of(strArray);\n// 3. Collections\nList<String> list = Arrays.asList(strArray);\nStream<String> lists = list.stream();\n// 4. iterate \nStream.iterate(0, n -> n + 3).limit(10).forEach(x -> System.out.print(x + \" \"));  // 0 3 6 9 12 15 18 21 24 27\n// 5. generate\n//将一个无限的stream限制在10个\"test\"字符串\nString joinStr = Stream.generate(() -> \"test\").limit(10).collect(Collectors.joining(\",\"));\n```\n**stream**:集合创建串行流\n\n```java\nList<String> strings = Arrays.asList(\"abc\", \"\", \"bc\", \"efg\", \"abcd\",\"\", \"jkl\");\nList<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());\n```\n**parallelStream**:集合创建并行流\n\n```java\nList<String> strings = Arrays.asList(\"abc\", \"\", \"bc\", \"efg\", \"abcd\",\"\", \"jkl\");\nList<String> filtered = strings.parallelStream().filter(string -> !string.isEmpty()).collect(Collectors.toList());\n```\n#### 二、中间操作\n\n**distinct**:去除重复\n```java\nList<String> lists = Arrays.asList(\"1\", \"2\", \"3\", \"3\", \"follow\",\"wind\", \"followwwind\");\nlists.stream().distinct().forEach(p -> System.out.print(p + \"\\t\")); \n//lists.stream().distinct().forEach(p -> System.out.print(System.out::println); \n```\n**filter**:过滤元素，返回过滤条件通过的流。\n```java\nlists.stream().filter(p -> p.length() > 1).forEach(p -> System.out.print(p + \"\\t\")); \n```\n**sorted**:流排序，中间操作返回流本身。\n```java\nlists.stream().filter(str -> str.contains(\"w\"))\n      .sorted((str1, str2) -> {\n         if (str1.length() == str2.length()) {\n            return 0;  \n         } else if (str1.length() > str2.length()) {\n            return 1;\n         } else {\n            return -1;\n         }\n      }).forEach(System.out::println); \n```\n**limint**:获取截取的前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素。\n```java\nlists.stream().limit(5).forEach(p -> System.out.print(p + \"\\t\"));\n```\n**skip**:返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream。\n```java\nlists.stream().skip(5).forEach(p -> System.out.print(p + \"\\t\")); \n```\n**peek**:生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数。\n```java\nlists.stream().peek(p -> {p = p.toUpperCase(); System.out.println(p);}).forEach(System.out::println); \n```\n**map**:接受lambda ,将元素转换成其他形式或提取信息。接受一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素\n```java\nlists.stream().map(p -> p + \"-->\").forEach(System.out::print); \nlists.stream().map(p -> p.split(\"\")).map(p -> {\n         String tmp = \"\";\n         if(p.length > 1){\n            tmp = p[1];\n         }else{\n            tmp = p[0];\n         }\n         return tmp + \"\\t\";\n      }).forEach(System.out::print);\n```\n**flatMap**:和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中\n```java\nlists.stream().flatMap(p -> Stream.of(p.split(\"www\"))).forEach(p -> System.out.print(p + \"\\t\"));\n//看看使用flatMap和不用faltMap输出结果的异同。\nStream<List<Integer>> inputStream = Stream.of(\n          Arrays.asList(1),\n          Arrays.asList(2, 3),\n          Arrays.asList(4, 5, 6)\n       );\n      System.out.println();\n      Stream<Integer> outputStream = inputStream.\n      flatMap((childList) -> childList.stream());\n      outputStream.forEach(p -> System.out.print(p + \"\\t\"));\n```\n#### 三、最终操作\n\n**forEach**:每个元素匹配\n```java\nlists.stream().forEach(System.out::print);\n```\n**match**:流匹配，终结操作\n```java\nSystem.out.println(lists.stream().allMatch(str -> str.length() == 3));\nSystem.out.println(lists.stream().anyMatch(str -> str.length() > 5));\nSystem.out.println(lists.stream().noneMatch(str -> str.length() > 5));\n```\n**count**:\n```java\nSystem.out.println(lists.stream().count());\n```\n**reduce**:可以将流中元素反复结合起来，得到一个值。可以设置一个初始值。\n```java\nOptional<String> reOptional = lists.stream().reduce((str, str2) -> str + \"-->\" + str2);\nreOptional.ifPresent(System.out::println); //\nlists.stream().filter(p -> p.matches(\"\\\\d+\")).mapToInt(p -> Integer.valueOf(p)).reduce(Integer::sum).ifPresent(System.out::println);\n```\n**collect**:收集。将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法\n```java\nList<String> ll = lists.stream().collect(Collectors.toList());\nlists.stream().collect(Collectors.maxBy((p1, p2) -> p1.compareTo(p2))).ifPresent(System.out::println); \nlists.stream().collect(Collectors.minBy((p1, p2) -> p1.compareTo(p2))).ifPresent(System.out::println); \nint s = lists.stream().filter(p -> p.matches(\"\\\\d+\")).collect(Collectors.summingInt(p -> Integer.valueOf(p)));\nString liString = lists.stream().collect(Collectors.joining(\",\"));\n```\n**sum**:做求和汇总\n```java\nlists.stream().filter(p -> p.matches(\"\\\\d+\")).mapToInt(p -> Integer.valueOf(p)).sum(); \n```\n**findFirst**:查找第一个\n```java\nOptional<String> firstOptional = lists.stream().findFirst();\nfirstOptional.ifPresent(System.out::println);\nStream.of().findFirst().ifPresent(System.out::println); \n```\n**findAny**:查找随机一个\n```java\nlists.stream().findAny().ifPresent(System.out::println);\n```\n**Collectors**:将流转化为集合和聚合元素。可以返回列表或者字符串\n```java\nList<String>strings = Arrays.asList(\"abc\", \"\", \"bc\", \"efg\", \"abcd\",\"\", \"jkl\");\nList<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());\n \nSystem.out.println(\"筛选列表: \" + filtered);\nString mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(\", \"));\nSystem.out.println(\"合并字符串: \" + mergedString);\n```\n**summaryStatistics**:统计，主要作用于int、double、long等类型上，产生各种统计结果\n```java\nList<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);\nIntSummaryStatistics stats = integers.stream().mapToInt((x) -> x).summaryStatistics();\nSystem.out.println(\"列表中最大的数 : \" + stats.getMax());\nSystem.out.println(\"列表中最小的数 : \" + stats.getMin());\nSystem.out.println(\"所有数之和 : \" + stats.getSum());\nSystem.out.println(\"平均数 : \" + stats.getAverage());\n```\n分区，分组，多级分组:进阶，高级，复杂操作，暂且略去。\n\n参考文献：\n1.https://blog.csdn.net/dongyuancaizi/article/details/78795945\n2.http://www.runoob.com/java/java8-streams.html\n3.https://blog.csdn.net/followwwind/article/details/78211395\n4.https://www.liaoxuefeng.com/article/001411309538536a1455df20d284b81a7bfa2f91db0f223000\n\n\n\n\n","source":"_posts/2018-07-24- java8流相关Stream.md","raw":"---\ntitle: java8流相关Stream\ndate: 2018-07-24 23:46:58\ntags: java基础\ncategories: JAVA学习\n---\n\n最近去了新公司，发现里面的循环什么的基本都是用stream来写的。就是java8那个流，感觉这种写法优雅，易懂，非常方便，所以在此学习并且记录下来。希望对Stream有一个大体上的认识。\n\n<!-- more --> \n\n简介:\n一个宏观上的介绍：流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。\n元素流在管道中经过中间操作(intermediate operation)的处理，最后由最终操作(terminal operation)得到前面处理的结果。\n\n流管道示意图:\n![流管道示意图](http://pcatcseys.bkt.clouddn.com/18-7-23/75871215.jpg)\n> 流的操作分为两种：\n> 中间操作方法：像filter这种，返回流对象本身，最终不产生新集合的方法。\n> 最终操作方法：像count这种最终会从stream产生值的方法。\n\n两个基础特性：\n- **Pipelining** ：中间操作都会返回流对象本身。这样多个操作可以串联成一个管道，如同流式风格。这样可以对操作进行优化，比如延迟执行和短路。\n- **内部迭代** ：以前对集合的遍历都是通过Iterator或者For-each的方式，显示的在集合外部进行迭代，这叫做外部迭代，Stream提供了内部迭代的方式，通过访问者模式实现。\n\n为什么不在集合类实现这些操作，而是定义了全新的Stream API？Oracle官方给出了几个重要原因：\n一是集合类持有的所有元素都是存储在内存中的，非常巨大的集合类会占用大量的内存，而Stream的元素却是在访问的时候才被计算出来，这种“延迟计算”的特性有点类似Clojure的lazy-seq，占用内存很少。\n二是集合类的迭代逻辑是调用者负责，通常是for循环，而Stream的迭代是隐含在对Stream的各种操作中，例如map()。\n\n#### 一、创建Stream\n\n**数据源**\n流的来源。可以是集合，数组，I/O channel，产生器generator等。(Map不能作为Stream的源)\n\n```java\n// 1.Individual values\nStream<String> s = Stream.of(\"a\", \"b\", \"c\");\n// 2. Arrays\nString [] strArray = new String[] {\"a\", \"b\", \"c\"};\nStream<String> arrs = Stream.of(strArray);\n// 3. Collections\nList<String> list = Arrays.asList(strArray);\nStream<String> lists = list.stream();\n// 4. iterate \nStream.iterate(0, n -> n + 3).limit(10).forEach(x -> System.out.print(x + \" \"));  // 0 3 6 9 12 15 18 21 24 27\n// 5. generate\n//将一个无限的stream限制在10个\"test\"字符串\nString joinStr = Stream.generate(() -> \"test\").limit(10).collect(Collectors.joining(\",\"));\n```\n**stream**:集合创建串行流\n\n```java\nList<String> strings = Arrays.asList(\"abc\", \"\", \"bc\", \"efg\", \"abcd\",\"\", \"jkl\");\nList<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());\n```\n**parallelStream**:集合创建并行流\n\n```java\nList<String> strings = Arrays.asList(\"abc\", \"\", \"bc\", \"efg\", \"abcd\",\"\", \"jkl\");\nList<String> filtered = strings.parallelStream().filter(string -> !string.isEmpty()).collect(Collectors.toList());\n```\n#### 二、中间操作\n\n**distinct**:去除重复\n```java\nList<String> lists = Arrays.asList(\"1\", \"2\", \"3\", \"3\", \"follow\",\"wind\", \"followwwind\");\nlists.stream().distinct().forEach(p -> System.out.print(p + \"\\t\")); \n//lists.stream().distinct().forEach(p -> System.out.print(System.out::println); \n```\n**filter**:过滤元素，返回过滤条件通过的流。\n```java\nlists.stream().filter(p -> p.length() > 1).forEach(p -> System.out.print(p + \"\\t\")); \n```\n**sorted**:流排序，中间操作返回流本身。\n```java\nlists.stream().filter(str -> str.contains(\"w\"))\n      .sorted((str1, str2) -> {\n         if (str1.length() == str2.length()) {\n            return 0;  \n         } else if (str1.length() > str2.length()) {\n            return 1;\n         } else {\n            return -1;\n         }\n      }).forEach(System.out::println); \n```\n**limint**:获取截取的前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素。\n```java\nlists.stream().limit(5).forEach(p -> System.out.print(p + \"\\t\"));\n```\n**skip**:返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream。\n```java\nlists.stream().skip(5).forEach(p -> System.out.print(p + \"\\t\")); \n```\n**peek**:生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数。\n```java\nlists.stream().peek(p -> {p = p.toUpperCase(); System.out.println(p);}).forEach(System.out::println); \n```\n**map**:接受lambda ,将元素转换成其他形式或提取信息。接受一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素\n```java\nlists.stream().map(p -> p + \"-->\").forEach(System.out::print); \nlists.stream().map(p -> p.split(\"\")).map(p -> {\n         String tmp = \"\";\n         if(p.length > 1){\n            tmp = p[1];\n         }else{\n            tmp = p[0];\n         }\n         return tmp + \"\\t\";\n      }).forEach(System.out::print);\n```\n**flatMap**:和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中\n```java\nlists.stream().flatMap(p -> Stream.of(p.split(\"www\"))).forEach(p -> System.out.print(p + \"\\t\"));\n//看看使用flatMap和不用faltMap输出结果的异同。\nStream<List<Integer>> inputStream = Stream.of(\n          Arrays.asList(1),\n          Arrays.asList(2, 3),\n          Arrays.asList(4, 5, 6)\n       );\n      System.out.println();\n      Stream<Integer> outputStream = inputStream.\n      flatMap((childList) -> childList.stream());\n      outputStream.forEach(p -> System.out.print(p + \"\\t\"));\n```\n#### 三、最终操作\n\n**forEach**:每个元素匹配\n```java\nlists.stream().forEach(System.out::print);\n```\n**match**:流匹配，终结操作\n```java\nSystem.out.println(lists.stream().allMatch(str -> str.length() == 3));\nSystem.out.println(lists.stream().anyMatch(str -> str.length() > 5));\nSystem.out.println(lists.stream().noneMatch(str -> str.length() > 5));\n```\n**count**:\n```java\nSystem.out.println(lists.stream().count());\n```\n**reduce**:可以将流中元素反复结合起来，得到一个值。可以设置一个初始值。\n```java\nOptional<String> reOptional = lists.stream().reduce((str, str2) -> str + \"-->\" + str2);\nreOptional.ifPresent(System.out::println); //\nlists.stream().filter(p -> p.matches(\"\\\\d+\")).mapToInt(p -> Integer.valueOf(p)).reduce(Integer::sum).ifPresent(System.out::println);\n```\n**collect**:收集。将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法\n```java\nList<String> ll = lists.stream().collect(Collectors.toList());\nlists.stream().collect(Collectors.maxBy((p1, p2) -> p1.compareTo(p2))).ifPresent(System.out::println); \nlists.stream().collect(Collectors.minBy((p1, p2) -> p1.compareTo(p2))).ifPresent(System.out::println); \nint s = lists.stream().filter(p -> p.matches(\"\\\\d+\")).collect(Collectors.summingInt(p -> Integer.valueOf(p)));\nString liString = lists.stream().collect(Collectors.joining(\",\"));\n```\n**sum**:做求和汇总\n```java\nlists.stream().filter(p -> p.matches(\"\\\\d+\")).mapToInt(p -> Integer.valueOf(p)).sum(); \n```\n**findFirst**:查找第一个\n```java\nOptional<String> firstOptional = lists.stream().findFirst();\nfirstOptional.ifPresent(System.out::println);\nStream.of().findFirst().ifPresent(System.out::println); \n```\n**findAny**:查找随机一个\n```java\nlists.stream().findAny().ifPresent(System.out::println);\n```\n**Collectors**:将流转化为集合和聚合元素。可以返回列表或者字符串\n```java\nList<String>strings = Arrays.asList(\"abc\", \"\", \"bc\", \"efg\", \"abcd\",\"\", \"jkl\");\nList<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());\n \nSystem.out.println(\"筛选列表: \" + filtered);\nString mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(\", \"));\nSystem.out.println(\"合并字符串: \" + mergedString);\n```\n**summaryStatistics**:统计，主要作用于int、double、long等类型上，产生各种统计结果\n```java\nList<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);\nIntSummaryStatistics stats = integers.stream().mapToInt((x) -> x).summaryStatistics();\nSystem.out.println(\"列表中最大的数 : \" + stats.getMax());\nSystem.out.println(\"列表中最小的数 : \" + stats.getMin());\nSystem.out.println(\"所有数之和 : \" + stats.getSum());\nSystem.out.println(\"平均数 : \" + stats.getAverage());\n```\n分区，分组，多级分组:进阶，高级，复杂操作，暂且略去。\n\n参考文献：\n1.https://blog.csdn.net/dongyuancaizi/article/details/78795945\n2.http://www.runoob.com/java/java8-streams.html\n3.https://blog.csdn.net/followwwind/article/details/78211395\n4.https://www.liaoxuefeng.com/article/001411309538536a1455df20d284b81a7bfa2f91db0f223000\n\n\n\n\n","slug":" java8流相关Stream","published":1,"updated":"2018-07-24T15:55:43.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4ev73u000360nbzcwgoro1","content":"<p>最近去了新公司，发现里面的循环什么的基本都是用stream来写的。就是java8那个流，感觉这种写法优雅，易懂，非常方便，所以在此学习并且记录下来。希望对Stream有一个大体上的认识。</p>\n<a id=\"more\"></a> \n<p>简介:<br>一个宏观上的介绍：流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。<br>元素流在管道中经过中间操作(intermediate operation)的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p>\n<p>流管道示意图:<br><img src=\"http://pcatcseys.bkt.clouddn.com/18-7-23/75871215.jpg\" alt=\"流管道示意图\"></p>\n<blockquote>\n<p>流的操作分为两种：<br>中间操作方法：像filter这种，返回流对象本身，最终不产生新集合的方法。<br>最终操作方法：像count这种最终会从stream产生值的方法。</p>\n</blockquote>\n<p>两个基础特性：</p>\n<ul>\n<li><strong>Pipelining</strong> ：中间操作都会返回流对象本身。这样多个操作可以串联成一个管道，如同流式风格。这样可以对操作进行优化，比如延迟执行和短路。</li>\n<li><strong>内部迭代</strong> ：以前对集合的遍历都是通过Iterator或者For-each的方式，显示的在集合外部进行迭代，这叫做外部迭代，Stream提供了内部迭代的方式，通过访问者模式实现。</li>\n</ul>\n<p>为什么不在集合类实现这些操作，而是定义了全新的Stream API？Oracle官方给出了几个重要原因：<br>一是集合类持有的所有元素都是存储在内存中的，非常巨大的集合类会占用大量的内存，而Stream的元素却是在访问的时候才被计算出来，这种“延迟计算”的特性有点类似Clojure的lazy-seq，占用内存很少。<br>二是集合类的迭代逻辑是调用者负责，通常是for循环，而Stream的迭代是隐含在对Stream的各种操作中，例如map()。</p>\n<h4 id=\"一、创建Stream\"><a href=\"#一、创建Stream\" class=\"headerlink\" title=\"一、创建Stream\"></a>一、创建Stream</h4><p><strong>数据源</strong><br>流的来源。可以是集合，数组，I/O channel，产生器generator等。(Map不能作为Stream的源)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.Individual values</span></span><br><span class=\"line\">Stream&lt;String&gt; s = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. Arrays</span></span><br><span class=\"line\">String [] strArray = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;;</span><br><span class=\"line\">Stream&lt;String&gt; arrs = Stream.of(strArray);</span><br><span class=\"line\"><span class=\"comment\">// 3. Collections</span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class=\"line\">Stream&lt;String&gt; lists = list.stream();</span><br><span class=\"line\"><span class=\"comment\">// 4. iterate </span></span><br><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">3</span>).limit(<span class=\"number\">10</span>).forEach(x -&gt; System.out.print(x + <span class=\"string\">\" \"</span>));  <span class=\"comment\">// 0 3 6 9 12 15 18 21 24 27</span></span><br><span class=\"line\"><span class=\"comment\">// 5. generate</span></span><br><span class=\"line\"><span class=\"comment\">//将一个无限的stream限制在10个\"test\"字符串</span></span><br><span class=\"line\">String joinStr = Stream.generate(() -&gt; <span class=\"string\">\"test\"</span>).limit(<span class=\"number\">10</span>).collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>stream</strong>:集合创建串行流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bc\"</span>, <span class=\"string\">\"efg\"</span>, <span class=\"string\">\"abcd\"</span>,<span class=\"string\">\"\"</span>, <span class=\"string\">\"jkl\"</span>);</span><br><span class=\"line\">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p><strong>parallelStream</strong>:集合创建并行流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bc\"</span>, <span class=\"string\">\"efg\"</span>, <span class=\"string\">\"abcd\"</span>,<span class=\"string\">\"\"</span>, <span class=\"string\">\"jkl\"</span>);</span><br><span class=\"line\">List&lt;String&gt; filtered = strings.parallelStream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、中间操作\"><a href=\"#二、中间操作\" class=\"headerlink\" title=\"二、中间操作\"></a>二、中间操作</h4><p><strong>distinct</strong>:去除重复<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; lists = Arrays.asList(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"follow\"</span>,<span class=\"string\">\"wind\"</span>, <span class=\"string\">\"followwwind\"</span>);</span><br><span class=\"line\">lists.stream().distinct().forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>)); </span><br><span class=\"line\"><span class=\"comment\">//lists.stream().distinct().forEach(p -&gt; System.out.print(System.out::println);</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>filter</strong>:过滤元素，返回过滤条件通过的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().filter(p -&gt; p.length() &gt; <span class=\"number\">1</span>).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>sorted</strong>:流排序，中间操作返回流本身。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().filter(str -&gt; str.contains(<span class=\"string\">\"w\"</span>))</span><br><span class=\"line\">      .sorted((str1, str2) -&gt; &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (str1.length() == str2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str1.length() &gt; str2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>limint</strong>:获取截取的前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().limit(<span class=\"number\">5</span>).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>skip</strong>:返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().skip(<span class=\"number\">5</span>).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>peek</strong>:生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().peek(p -&gt; &#123;p = p.toUpperCase(); System.out.println(p);&#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>map</strong>:接受lambda ,将元素转换成其他形式或提取信息。接受一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().map(p -&gt; p + <span class=\"string\">\"--&gt;\"</span>).forEach(System.out::print); </span><br><span class=\"line\">lists.stream().map(p -&gt; p.split(<span class=\"string\">\"\"</span>)).map(p -&gt; &#123;</span><br><span class=\"line\">         String tmp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(p.length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            tmp = p[<span class=\"number\">1</span>];</span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tmp = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> tmp + <span class=\"string\">\"\\t\"</span>;</span><br><span class=\"line\">      &#125;).forEach(System.out::print);</span><br></pre></td></tr></table></figure></p>\n<p><strong>flatMap</strong>:和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().flatMap(p -&gt; Stream.of(p.split(<span class=\"string\">\"www\"</span>))).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//看看使用flatMap和不用faltMap输出结果的异同。</span></span><br><span class=\"line\">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class=\"line\">          Arrays.asList(<span class=\"number\">1</span>),</span><br><span class=\"line\">          Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">          Arrays.asList(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">       );</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      Stream&lt;Integer&gt; outputStream = inputStream.</span><br><span class=\"line\">      flatMap((childList) -&gt; childList.stream());</span><br><span class=\"line\">      outputStream.forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、最终操作\"><a href=\"#三、最终操作\" class=\"headerlink\" title=\"三、最终操作\"></a>三、最终操作</h4><p><strong>forEach</strong>:每个元素匹配<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().forEach(System.out::print);</span><br></pre></td></tr></table></figure></p>\n<p><strong>match</strong>:流匹配，终结操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(lists.stream().allMatch(str -&gt; str.length() == <span class=\"number\">3</span>));</span><br><span class=\"line\">System.out.println(lists.stream().anyMatch(str -&gt; str.length() &gt; <span class=\"number\">5</span>));</span><br><span class=\"line\">System.out.println(lists.stream().noneMatch(str -&gt; str.length() &gt; <span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>count</strong>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(lists.stream().count());</span><br></pre></td></tr></table></figure></p>\n<p><strong>reduce</strong>:可以将流中元素反复结合起来，得到一个值。可以设置一个初始值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; reOptional = lists.stream().reduce((str, str2) -&gt; str + <span class=\"string\">\"--&gt;\"</span> + str2);</span><br><span class=\"line\">reOptional.ifPresent(System.out::println); <span class=\"comment\">//</span></span><br><span class=\"line\">lists.stream().filter(p -&gt; p.matches(<span class=\"string\">\"\\\\d+\"</span>)).mapToInt(p -&gt; Integer.valueOf(p)).reduce(Integer::sum).ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>collect</strong>:收集。将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; ll = lists.stream().collect(Collectors.toList());</span><br><span class=\"line\">lists.stream().collect(Collectors.maxBy((p1, p2) -&gt; p1.compareTo(p2))).ifPresent(System.out::println); </span><br><span class=\"line\">lists.stream().collect(Collectors.minBy((p1, p2) -&gt; p1.compareTo(p2))).ifPresent(System.out::println); </span><br><span class=\"line\"><span class=\"keyword\">int</span> s = lists.stream().filter(p -&gt; p.matches(<span class=\"string\">\"\\\\d+\"</span>)).collect(Collectors.summingInt(p -&gt; Integer.valueOf(p)));</span><br><span class=\"line\">String liString = lists.stream().collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>sum</strong>:做求和汇总<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().filter(p -&gt; p.matches(<span class=\"string\">\"\\\\d+\"</span>)).mapToInt(p -&gt; Integer.valueOf(p)).sum();</span><br></pre></td></tr></table></figure></p>\n<p><strong>findFirst</strong>:查找第一个<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; firstOptional = lists.stream().findFirst();</span><br><span class=\"line\">firstOptional.ifPresent(System.out::println);</span><br><span class=\"line\">Stream.of().findFirst().ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>findAny</strong>:查找随机一个<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().findAny().ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>Collectors</strong>:将流转化为集合和聚合元素。可以返回列表或者字符串<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt;strings = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bc\"</span>, <span class=\"string\">\"efg\"</span>, <span class=\"string\">\"abcd\"</span>,<span class=\"string\">\"\"</span>, <span class=\"string\">\"jkl\"</span>);</span><br><span class=\"line\">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class=\"line\"> </span><br><span class=\"line\">System.out.println(<span class=\"string\">\"筛选列表: \"</span> + filtered);</span><br><span class=\"line\">String mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class=\"string\">\", \"</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"合并字符串: \"</span> + mergedString);</span><br></pre></td></tr></table></figure></p>\n<p><strong>summaryStatistics</strong>:统计，主要作用于int、double、long等类型上，产生各种统计结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">IntSummaryStatistics stats = integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"列表中最大的数 : \"</span> + stats.getMax());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"列表中最小的数 : \"</span> + stats.getMin());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"所有数之和 : \"</span> + stats.getSum());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"平均数 : \"</span> + stats.getAverage());</span><br></pre></td></tr></table></figure></p>\n<p>分区，分组，多级分组:进阶，高级，复杂操作，暂且略去。</p>\n<p>参考文献：<br>1.<a href=\"https://blog.csdn.net/dongyuancaizi/article/details/78795945\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dongyuancaizi/article/details/78795945</a><br>2.<a href=\"http://www.runoob.com/java/java8-streams.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/java/java8-streams.html</a><br>3.<a href=\"https://blog.csdn.net/followwwind/article/details/78211395\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/followwwind/article/details/78211395</a><br>4.<a href=\"https://www.liaoxuefeng.com/article/001411309538536a1455df20d284b81a7bfa2f91db0f223000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/article/001411309538536a1455df20d284b81a7bfa2f91db0f223000</a></p>\n","site":{"data":{}},"excerpt":"<p>最近去了新公司，发现里面的循环什么的基本都是用stream来写的。就是java8那个流，感觉这种写法优雅，易懂，非常方便，所以在此学习并且记录下来。希望对Stream有一个大体上的认识。</p>","more":"<p>简介:<br>一个宏观上的介绍：流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。<br>元素流在管道中经过中间操作(intermediate operation)的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p>\n<p>流管道示意图:<br><img src=\"http://pcatcseys.bkt.clouddn.com/18-7-23/75871215.jpg\" alt=\"流管道示意图\"></p>\n<blockquote>\n<p>流的操作分为两种：<br>中间操作方法：像filter这种，返回流对象本身，最终不产生新集合的方法。<br>最终操作方法：像count这种最终会从stream产生值的方法。</p>\n</blockquote>\n<p>两个基础特性：</p>\n<ul>\n<li><strong>Pipelining</strong> ：中间操作都会返回流对象本身。这样多个操作可以串联成一个管道，如同流式风格。这样可以对操作进行优化，比如延迟执行和短路。</li>\n<li><strong>内部迭代</strong> ：以前对集合的遍历都是通过Iterator或者For-each的方式，显示的在集合外部进行迭代，这叫做外部迭代，Stream提供了内部迭代的方式，通过访问者模式实现。</li>\n</ul>\n<p>为什么不在集合类实现这些操作，而是定义了全新的Stream API？Oracle官方给出了几个重要原因：<br>一是集合类持有的所有元素都是存储在内存中的，非常巨大的集合类会占用大量的内存，而Stream的元素却是在访问的时候才被计算出来，这种“延迟计算”的特性有点类似Clojure的lazy-seq，占用内存很少。<br>二是集合类的迭代逻辑是调用者负责，通常是for循环，而Stream的迭代是隐含在对Stream的各种操作中，例如map()。</p>\n<h4 id=\"一、创建Stream\"><a href=\"#一、创建Stream\" class=\"headerlink\" title=\"一、创建Stream\"></a>一、创建Stream</h4><p><strong>数据源</strong><br>流的来源。可以是集合，数组，I/O channel，产生器generator等。(Map不能作为Stream的源)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.Individual values</span></span><br><span class=\"line\">Stream&lt;String&gt; s = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. Arrays</span></span><br><span class=\"line\">String [] strArray = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;;</span><br><span class=\"line\">Stream&lt;String&gt; arrs = Stream.of(strArray);</span><br><span class=\"line\"><span class=\"comment\">// 3. Collections</span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class=\"line\">Stream&lt;String&gt; lists = list.stream();</span><br><span class=\"line\"><span class=\"comment\">// 4. iterate </span></span><br><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">3</span>).limit(<span class=\"number\">10</span>).forEach(x -&gt; System.out.print(x + <span class=\"string\">\" \"</span>));  <span class=\"comment\">// 0 3 6 9 12 15 18 21 24 27</span></span><br><span class=\"line\"><span class=\"comment\">// 5. generate</span></span><br><span class=\"line\"><span class=\"comment\">//将一个无限的stream限制在10个\"test\"字符串</span></span><br><span class=\"line\">String joinStr = Stream.generate(() -&gt; <span class=\"string\">\"test\"</span>).limit(<span class=\"number\">10</span>).collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>stream</strong>:集合创建串行流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bc\"</span>, <span class=\"string\">\"efg\"</span>, <span class=\"string\">\"abcd\"</span>,<span class=\"string\">\"\"</span>, <span class=\"string\">\"jkl\"</span>);</span><br><span class=\"line\">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p><strong>parallelStream</strong>:集合创建并行流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bc\"</span>, <span class=\"string\">\"efg\"</span>, <span class=\"string\">\"abcd\"</span>,<span class=\"string\">\"\"</span>, <span class=\"string\">\"jkl\"</span>);</span><br><span class=\"line\">List&lt;String&gt; filtered = strings.parallelStream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、中间操作\"><a href=\"#二、中间操作\" class=\"headerlink\" title=\"二、中间操作\"></a>二、中间操作</h4><p><strong>distinct</strong>:去除重复<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; lists = Arrays.asList(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"follow\"</span>,<span class=\"string\">\"wind\"</span>, <span class=\"string\">\"followwwind\"</span>);</span><br><span class=\"line\">lists.stream().distinct().forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>)); </span><br><span class=\"line\"><span class=\"comment\">//lists.stream().distinct().forEach(p -&gt; System.out.print(System.out::println);</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>filter</strong>:过滤元素，返回过滤条件通过的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().filter(p -&gt; p.length() &gt; <span class=\"number\">1</span>).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>sorted</strong>:流排序，中间操作返回流本身。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().filter(str -&gt; str.contains(<span class=\"string\">\"w\"</span>))</span><br><span class=\"line\">      .sorted((str1, str2) -&gt; &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (str1.length() == str2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str1.length() &gt; str2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>limint</strong>:获取截取的前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().limit(<span class=\"number\">5</span>).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>skip</strong>:返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().skip(<span class=\"number\">5</span>).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>peek</strong>:生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().peek(p -&gt; &#123;p = p.toUpperCase(); System.out.println(p);&#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>map</strong>:接受lambda ,将元素转换成其他形式或提取信息。接受一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().map(p -&gt; p + <span class=\"string\">\"--&gt;\"</span>).forEach(System.out::print); </span><br><span class=\"line\">lists.stream().map(p -&gt; p.split(<span class=\"string\">\"\"</span>)).map(p -&gt; &#123;</span><br><span class=\"line\">         String tmp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(p.length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            tmp = p[<span class=\"number\">1</span>];</span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tmp = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> tmp + <span class=\"string\">\"\\t\"</span>;</span><br><span class=\"line\">      &#125;).forEach(System.out::print);</span><br></pre></td></tr></table></figure></p>\n<p><strong>flatMap</strong>:和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().flatMap(p -&gt; Stream.of(p.split(<span class=\"string\">\"www\"</span>))).forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//看看使用flatMap和不用faltMap输出结果的异同。</span></span><br><span class=\"line\">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class=\"line\">          Arrays.asList(<span class=\"number\">1</span>),</span><br><span class=\"line\">          Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">          Arrays.asList(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">       );</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      Stream&lt;Integer&gt; outputStream = inputStream.</span><br><span class=\"line\">      flatMap((childList) -&gt; childList.stream());</span><br><span class=\"line\">      outputStream.forEach(p -&gt; System.out.print(p + <span class=\"string\">\"\\t\"</span>));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、最终操作\"><a href=\"#三、最终操作\" class=\"headerlink\" title=\"三、最终操作\"></a>三、最终操作</h4><p><strong>forEach</strong>:每个元素匹配<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().forEach(System.out::print);</span><br></pre></td></tr></table></figure></p>\n<p><strong>match</strong>:流匹配，终结操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(lists.stream().allMatch(str -&gt; str.length() == <span class=\"number\">3</span>));</span><br><span class=\"line\">System.out.println(lists.stream().anyMatch(str -&gt; str.length() &gt; <span class=\"number\">5</span>));</span><br><span class=\"line\">System.out.println(lists.stream().noneMatch(str -&gt; str.length() &gt; <span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>count</strong>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(lists.stream().count());</span><br></pre></td></tr></table></figure></p>\n<p><strong>reduce</strong>:可以将流中元素反复结合起来，得到一个值。可以设置一个初始值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; reOptional = lists.stream().reduce((str, str2) -&gt; str + <span class=\"string\">\"--&gt;\"</span> + str2);</span><br><span class=\"line\">reOptional.ifPresent(System.out::println); <span class=\"comment\">//</span></span><br><span class=\"line\">lists.stream().filter(p -&gt; p.matches(<span class=\"string\">\"\\\\d+\"</span>)).mapToInt(p -&gt; Integer.valueOf(p)).reduce(Integer::sum).ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>collect</strong>:收集。将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; ll = lists.stream().collect(Collectors.toList());</span><br><span class=\"line\">lists.stream().collect(Collectors.maxBy((p1, p2) -&gt; p1.compareTo(p2))).ifPresent(System.out::println); </span><br><span class=\"line\">lists.stream().collect(Collectors.minBy((p1, p2) -&gt; p1.compareTo(p2))).ifPresent(System.out::println); </span><br><span class=\"line\"><span class=\"keyword\">int</span> s = lists.stream().filter(p -&gt; p.matches(<span class=\"string\">\"\\\\d+\"</span>)).collect(Collectors.summingInt(p -&gt; Integer.valueOf(p)));</span><br><span class=\"line\">String liString = lists.stream().collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong>sum</strong>:做求和汇总<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().filter(p -&gt; p.matches(<span class=\"string\">\"\\\\d+\"</span>)).mapToInt(p -&gt; Integer.valueOf(p)).sum();</span><br></pre></td></tr></table></figure></p>\n<p><strong>findFirst</strong>:查找第一个<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; firstOptional = lists.stream().findFirst();</span><br><span class=\"line\">firstOptional.ifPresent(System.out::println);</span><br><span class=\"line\">Stream.of().findFirst().ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>findAny</strong>:查找随机一个<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lists.stream().findAny().ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p><strong>Collectors</strong>:将流转化为集合和聚合元素。可以返回列表或者字符串<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt;strings = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bc\"</span>, <span class=\"string\">\"efg\"</span>, <span class=\"string\">\"abcd\"</span>,<span class=\"string\">\"\"</span>, <span class=\"string\">\"jkl\"</span>);</span><br><span class=\"line\">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class=\"line\"> </span><br><span class=\"line\">System.out.println(<span class=\"string\">\"筛选列表: \"</span> + filtered);</span><br><span class=\"line\">String mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class=\"string\">\", \"</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"合并字符串: \"</span> + mergedString);</span><br></pre></td></tr></table></figure></p>\n<p><strong>summaryStatistics</strong>:统计，主要作用于int、double、long等类型上，产生各种统计结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">IntSummaryStatistics stats = integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"列表中最大的数 : \"</span> + stats.getMax());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"列表中最小的数 : \"</span> + stats.getMin());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"所有数之和 : \"</span> + stats.getSum());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"平均数 : \"</span> + stats.getAverage());</span><br></pre></td></tr></table></figure></p>\n<p>分区，分组，多级分组:进阶，高级，复杂操作，暂且略去。</p>\n<p>参考文献：<br>1.<a href=\"https://blog.csdn.net/dongyuancaizi/article/details/78795945\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dongyuancaizi/article/details/78795945</a><br>2.<a href=\"http://www.runoob.com/java/java8-streams.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/java/java8-streams.html</a><br>3.<a href=\"https://blog.csdn.net/followwwind/article/details/78211395\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/followwwind/article/details/78211395</a><br>4.<a href=\"https://www.liaoxuefeng.com/article/001411309538536a1455df20d284b81a7bfa2f91db0f223000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/article/001411309538536a1455df20d284b81a7bfa2f91db0f223000</a></p>"},{"title":"生产者消费者","date":"2018-04-22T09:22:41.000Z","_content":"\n最近看了马士兵老师讲的并发课程，讲到这个例子的时候提出两个问题，现在自己经过反思消化，记录下来。\n\n<!-- more --> \n\n```java\nimport java.util.LinkedList;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Description:一个普通的生产者和消费者的例子\n * @author xiudongxu\n * @date 2018/4/22\n */\npublic class ProducerAndConsumer {\n\n    final private LinkedList list = new LinkedList(); //存储容器\n    final private int MAX = 10; //元素最大个数\n    private int count = 0;\n\n    public synchronized void put(Object obj){\n        //问题1：这里为啥用while而不是if\n        //假设有两个线程t1,t2在同时在wait处等待，而且容器此时突然有了一个空位置，而且已经被刚刚消费了的线程使用notifyall()唤醒了，\n        //t1，t2接收到唤醒操作时，同时去获取对象锁，此时假设t2获取成功了。t2 添加一个元素，此时容器满了，t2线程使用notifyall唤醒t1线程。\n        //t1去获取对象锁，从this.wait()处继续执行代码。如果此时使用的是if 那么就出问题了，t1直接执行add操作，导致容器超出容量，报错。\n        //而如果是while循环的话，那么还会进行一次list.size() == MAX 判断。\n        //判断结束t1 又会wait 而释放锁。等待被唤醒添加元素。\n        //这样就不会出问题了。\n\n        //当然以上描述比较复杂，是因为要出现这种错误的话，需要天时地利人和，\n        //但是这种极端的情况又必须要考虑好，才能保证万无一失。所以说这个经典问题是值得反复推敲的。\n        //而且《effective java》 中也说到 一般wait都要与while配合使用，如果不懂就记住。\n        while (list.size() == MAX){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        list.add(obj);\n        ++count;\n        //问题2：为何用notifyall 而不是 notify\n        //注：唤醒  是指线程的状态 从等待的状态变成就绪的状态。\n        //假设此时是有一个生产者线程，一个消费者线程在等待的状态。\n        //如果使用notify 唤醒的是一个生产者线程。那么就死锁等待了。所有的线程都是等待状态就死锁了。\n        //如果是notify 唤醒的是所有线程，即使是一个生产者线程，那么生产者线程等待失去锁的时候，消费者线程从就绪态获得锁会继续执行消费，而不是程序进入死锁的状态。\n        this.notifyAll();\n    }\n\n    public synchronized Object get(){\n        Object obj = null;\n        while (list.size() == 0){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        obj = list.removeFirst();\n        -- count;\n        this.notifyAll();\n        return obj;\n    }\n\n    public static void main(String[] args) {\n        ProducerAndConsumer pandc = new ProducerAndConsumer();\n        //启动消费者线程\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                for (int j = 0; j < 5; j++) {\n                    System.out.println(pandc.get());\n                }\n            },\"consumer\" + i).start();\n        }\n        //睡一会\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        //启动生产者线程\n        for (int i = 0; i < 2; i++) {\n            new Thread(()->{\n                for (int j = 0; j < 25; j++) {\n                    pandc.put(Thread.currentThread().getName() + \" \" + j);\n                }\n            },\"producter\" + i).start();\n        }\n    }\n}\n\n```\n","source":"_posts/2018-04-22-生产者消费者.md","raw":"---\ntitle: 生产者消费者\ndate: 2018-04-22 17:22:41\ntags: 多线程\ncategories: JAVA学习\n---\n\n最近看了马士兵老师讲的并发课程，讲到这个例子的时候提出两个问题，现在自己经过反思消化，记录下来。\n\n<!-- more --> \n\n```java\nimport java.util.LinkedList;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Description:一个普通的生产者和消费者的例子\n * @author xiudongxu\n * @date 2018/4/22\n */\npublic class ProducerAndConsumer {\n\n    final private LinkedList list = new LinkedList(); //存储容器\n    final private int MAX = 10; //元素最大个数\n    private int count = 0;\n\n    public synchronized void put(Object obj){\n        //问题1：这里为啥用while而不是if\n        //假设有两个线程t1,t2在同时在wait处等待，而且容器此时突然有了一个空位置，而且已经被刚刚消费了的线程使用notifyall()唤醒了，\n        //t1，t2接收到唤醒操作时，同时去获取对象锁，此时假设t2获取成功了。t2 添加一个元素，此时容器满了，t2线程使用notifyall唤醒t1线程。\n        //t1去获取对象锁，从this.wait()处继续执行代码。如果此时使用的是if 那么就出问题了，t1直接执行add操作，导致容器超出容量，报错。\n        //而如果是while循环的话，那么还会进行一次list.size() == MAX 判断。\n        //判断结束t1 又会wait 而释放锁。等待被唤醒添加元素。\n        //这样就不会出问题了。\n\n        //当然以上描述比较复杂，是因为要出现这种错误的话，需要天时地利人和，\n        //但是这种极端的情况又必须要考虑好，才能保证万无一失。所以说这个经典问题是值得反复推敲的。\n        //而且《effective java》 中也说到 一般wait都要与while配合使用，如果不懂就记住。\n        while (list.size() == MAX){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        list.add(obj);\n        ++count;\n        //问题2：为何用notifyall 而不是 notify\n        //注：唤醒  是指线程的状态 从等待的状态变成就绪的状态。\n        //假设此时是有一个生产者线程，一个消费者线程在等待的状态。\n        //如果使用notify 唤醒的是一个生产者线程。那么就死锁等待了。所有的线程都是等待状态就死锁了。\n        //如果是notify 唤醒的是所有线程，即使是一个生产者线程，那么生产者线程等待失去锁的时候，消费者线程从就绪态获得锁会继续执行消费，而不是程序进入死锁的状态。\n        this.notifyAll();\n    }\n\n    public synchronized Object get(){\n        Object obj = null;\n        while (list.size() == 0){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        obj = list.removeFirst();\n        -- count;\n        this.notifyAll();\n        return obj;\n    }\n\n    public static void main(String[] args) {\n        ProducerAndConsumer pandc = new ProducerAndConsumer();\n        //启动消费者线程\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                for (int j = 0; j < 5; j++) {\n                    System.out.println(pandc.get());\n                }\n            },\"consumer\" + i).start();\n        }\n        //睡一会\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        //启动生产者线程\n        for (int i = 0; i < 2; i++) {\n            new Thread(()->{\n                for (int j = 0; j < 25; j++) {\n                    pandc.put(Thread.currentThread().getName() + \" \" + j);\n                }\n            },\"producter\" + i).start();\n        }\n    }\n}\n\n```\n","slug":"生产者消费者","published":1,"updated":"2018-05-21T13:15:56.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4ev74a000760nb3dhsmn5q","content":"<p>最近看了马士兵老师讲的并发课程，讲到这个例子的时候提出两个问题，现在自己经过反思消化，记录下来。</p>\n<a id=\"more\"></a> \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:一个普通的生产者和消费者的例子</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xiudongxu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/4/22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerAndConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> LinkedList list = <span class=\"keyword\">new</span> LinkedList(); <span class=\"comment\">//存储容器</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">10</span>; <span class=\"comment\">//元素最大个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//问题1：这里为啥用while而不是if</span></span><br><span class=\"line\">        <span class=\"comment\">//假设有两个线程t1,t2在同时在wait处等待，而且容器此时突然有了一个空位置，而且已经被刚刚消费了的线程使用notifyall()唤醒了，</span></span><br><span class=\"line\">        <span class=\"comment\">//t1，t2接收到唤醒操作时，同时去获取对象锁，此时假设t2获取成功了。t2 添加一个元素，此时容器满了，t2线程使用notifyall唤醒t1线程。</span></span><br><span class=\"line\">        <span class=\"comment\">//t1去获取对象锁，从this.wait()处继续执行代码。如果此时使用的是if 那么就出问题了，t1直接执行add操作，导致容器超出容量，报错。</span></span><br><span class=\"line\">        <span class=\"comment\">//而如果是while循环的话，那么还会进行一次list.size() == MAX 判断。</span></span><br><span class=\"line\">        <span class=\"comment\">//判断结束t1 又会wait 而释放锁。等待被唤醒添加元素。</span></span><br><span class=\"line\">        <span class=\"comment\">//这样就不会出问题了。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当然以上描述比较复杂，是因为要出现这种错误的话，需要天时地利人和，</span></span><br><span class=\"line\">        <span class=\"comment\">//但是这种极端的情况又必须要考虑好，才能保证万无一失。所以说这个经典问题是值得反复推敲的。</span></span><br><span class=\"line\">        <span class=\"comment\">//而且《effective java》 中也说到 一般wait都要与while配合使用，如果不懂就记住。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (list.size() == MAX)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(obj);</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">        <span class=\"comment\">//问题2：为何用notifyall 而不是 notify</span></span><br><span class=\"line\">        <span class=\"comment\">//注：唤醒  是指线程的状态 从等待的状态变成就绪的状态。</span></span><br><span class=\"line\">        <span class=\"comment\">//假设此时是有一个生产者线程，一个消费者线程在等待的状态。</span></span><br><span class=\"line\">        <span class=\"comment\">//如果使用notify 唤醒的是一个生产者线程。那么就死锁等待了。所有的线程都是等待状态就死锁了。</span></span><br><span class=\"line\">        <span class=\"comment\">//如果是notify 唤醒的是所有线程，即使是一个生产者线程，那么生产者线程等待失去锁的时候，消费者线程从就绪态获得锁会继续执行消费，而不是程序进入死锁的状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Object <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (list.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        obj = list.removeFirst();</span><br><span class=\"line\">        -- count;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ProducerAndConsumer pandc = <span class=\"keyword\">new</span> ProducerAndConsumer();</span><br><span class=\"line\">        <span class=\"comment\">//启动消费者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++) &#123;</span><br><span class=\"line\">                    System.out.println(pandc.get());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"consumer\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//睡一会</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//启动生产者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">25</span>; j++) &#123;</span><br><span class=\"line\">                    pandc.put(Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"producter\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近看了马士兵老师讲的并发课程，讲到这个例子的时候提出两个问题，现在自己经过反思消化，记录下来。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:一个普通的生产者和消费者的例子</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xiudongxu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/4/22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerAndConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> LinkedList list = <span class=\"keyword\">new</span> LinkedList(); <span class=\"comment\">//存储容器</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">10</span>; <span class=\"comment\">//元素最大个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//问题1：这里为啥用while而不是if</span></span><br><span class=\"line\">        <span class=\"comment\">//假设有两个线程t1,t2在同时在wait处等待，而且容器此时突然有了一个空位置，而且已经被刚刚消费了的线程使用notifyall()唤醒了，</span></span><br><span class=\"line\">        <span class=\"comment\">//t1，t2接收到唤醒操作时，同时去获取对象锁，此时假设t2获取成功了。t2 添加一个元素，此时容器满了，t2线程使用notifyall唤醒t1线程。</span></span><br><span class=\"line\">        <span class=\"comment\">//t1去获取对象锁，从this.wait()处继续执行代码。如果此时使用的是if 那么就出问题了，t1直接执行add操作，导致容器超出容量，报错。</span></span><br><span class=\"line\">        <span class=\"comment\">//而如果是while循环的话，那么还会进行一次list.size() == MAX 判断。</span></span><br><span class=\"line\">        <span class=\"comment\">//判断结束t1 又会wait 而释放锁。等待被唤醒添加元素。</span></span><br><span class=\"line\">        <span class=\"comment\">//这样就不会出问题了。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当然以上描述比较复杂，是因为要出现这种错误的话，需要天时地利人和，</span></span><br><span class=\"line\">        <span class=\"comment\">//但是这种极端的情况又必须要考虑好，才能保证万无一失。所以说这个经典问题是值得反复推敲的。</span></span><br><span class=\"line\">        <span class=\"comment\">//而且《effective java》 中也说到 一般wait都要与while配合使用，如果不懂就记住。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (list.size() == MAX)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(obj);</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">        <span class=\"comment\">//问题2：为何用notifyall 而不是 notify</span></span><br><span class=\"line\">        <span class=\"comment\">//注：唤醒  是指线程的状态 从等待的状态变成就绪的状态。</span></span><br><span class=\"line\">        <span class=\"comment\">//假设此时是有一个生产者线程，一个消费者线程在等待的状态。</span></span><br><span class=\"line\">        <span class=\"comment\">//如果使用notify 唤醒的是一个生产者线程。那么就死锁等待了。所有的线程都是等待状态就死锁了。</span></span><br><span class=\"line\">        <span class=\"comment\">//如果是notify 唤醒的是所有线程，即使是一个生产者线程，那么生产者线程等待失去锁的时候，消费者线程从就绪态获得锁会继续执行消费，而不是程序进入死锁的状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Object <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (list.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        obj = list.removeFirst();</span><br><span class=\"line\">        -- count;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ProducerAndConsumer pandc = <span class=\"keyword\">new</span> ProducerAndConsumer();</span><br><span class=\"line\">        <span class=\"comment\">//启动消费者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++) &#123;</span><br><span class=\"line\">                    System.out.println(pandc.get());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"consumer\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//睡一会</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//启动生产者线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">25</span>; j++) &#123;</span><br><span class=\"line\">                    pandc.put(Thread.currentThread().getName() + <span class=\"string\">\" \"</span> + j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"producter\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"简单的性能优化总结","date":"2018-05-21T12:54:03.000Z","_content":"\n一、Web前端性能优化\n\n1. 浏览器访问优化   \n\n   - 减少http请求，主要是合并css，合并js，合并图片，浏览器一次访问的js，css合并成一个文件，多张图片合并成一张，如果每张图片有不通的超链接，可通过css偏移响应鼠标点击操作，构造不通的URL 。<!-- more --> \n   - 使用浏览器缓存，通过设置http头中的Cache-Control 和 Expires 的属性，可以缓存js，css，logo，图标这种更新频率比较低的静态资源，并设置缓存天数。如果静态资源文件变化需要及时的应用到客户端浏览器的时候可以通过改变文件名来实现，即更新一个文件而不是更新文件的内容。 \n   - 启用压缩，在服务器端对文件压缩，在浏览器对文件进行解压缩。可以对html，css，js文件启用GZip压缩可达到较好的效果。 \n   - CSS放在页面的最上面，JS放在页面最下面。css直接渲染，js会执行，如果时间长会阻塞整个页面，造成缓慢。 \n   - 减少Cookie的传输。静态资源的访问，可以使用独立域名访问，避免请求静态资源时发送cookie。 \n2. CDN加速 \n3. 反向代理，通过配置缓存的功能加速web请求。负载均衡，也可以热门信息缓存在反向代理服务器上，如果更新的话就通知缓存失效。 \n\n二、应用服务器性能优化，主要有缓存，集群，异步等。 \n\n1. 分布式缓存，缓存可以存在浏览器，应用服务器和数据库服务器中。既可以对数据缓存，也可以对文件进行缓存，还可以对页面片段进行缓存。 \n\n   - 缓存的基本原理，缓存就是将数据存储在相对较高访问速度的存储介质中 \n   - 合理使用缓存，一般来说数据的读写比为2：1以上使用缓存才有意义。缓存系统启动时就把热点数据加载好，这个缓存预加载手段叫做缓存预热。缓存穿透，一个简单的对策是将不存在的数据也缓存起来。 \n   - 分布式缓存架构。应用程序通过一致性hash等路由算法选择缓存服务器远程访问缓存数据，缓存服务器之间不通信。 \n   - Memcached，分布式服务器远程通信需要考虑两方面的要素，一个是通信协议，一个是通信序列化协议。 \n\n2. 异步操作 \n\n   加入消息队列，消息队列既能解耦，又能削峰。将短时间宝并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。 \n\n3. 使用集群 \n\n   使用负载均衡技术为一个应用构建一个由多台服务器组成的服务器集群，将并发访问骑牛分发到多台服务器上处理。避免单一服务器因负载压力过大而相应缓慢。 \n\n4. 代码优化 \n\n   - 多线程处理，线程安全解决办法，1.将对象设计成无状态，这样在多线程并发访问的时候就不会出现状态不一致的情况，servlet对象的设计为无状态的对象。web开发中常用的贫血模型对象都是无状态对象，不过从面向对象的设计角度看的话，无状态对象是一种不良的设计。2.使用局部对象。3.加锁 \n   - 资源复用。减少开销很大的系统资源的创建和销毁，比如数据库连接，网络通信连接，线程，复杂对象等。资源复用主要有两种模式：单例和对象池。 \n   - 数据结构。一般的Hash算法是Time33算法，对字符串逐字符迭代乘以33，求得Hash值，hash(i) = hash(i-1) * 33 + str[i]    比如 AA 的 hashcode 是2210  AB的hashcode 是2211 。一个可行的方案是对字符串取信息指纹，再对信息求hashcode，原始字符串->MD5->hash计算 \n   - 垃圾回收 \n\n三、存储性能优化 \n\n​\tB+树和LSM树：一般的NoSql产品采用LSM树作为主要的数据结构。LSM树可以看做是一个N阶合并树。        \n\n​\tRAID vs HDFS：HDFS以块为单位管理文件内容，一个文件被分割成若干个Block。每写完一个Block，HDFS就将其自动复制到另外两台机器上，保证每个Block有三个副本。当对文件进行处理计算时，通过MapReduce并发计算任务框架，启动多个计算子任务。 ","source":"_posts/2018-05-21-简单的性能优化.md","raw":"---\ntitle: 简单的性能优化总结\ndate: 2018-05-21 20:54:03\ntags: 性能优化\ncategories: 架构相关\n---\n\n一、Web前端性能优化\n\n1. 浏览器访问优化   \n\n   - 减少http请求，主要是合并css，合并js，合并图片，浏览器一次访问的js，css合并成一个文件，多张图片合并成一张，如果每张图片有不通的超链接，可通过css偏移响应鼠标点击操作，构造不通的URL 。<!-- more --> \n   - 使用浏览器缓存，通过设置http头中的Cache-Control 和 Expires 的属性，可以缓存js，css，logo，图标这种更新频率比较低的静态资源，并设置缓存天数。如果静态资源文件变化需要及时的应用到客户端浏览器的时候可以通过改变文件名来实现，即更新一个文件而不是更新文件的内容。 \n   - 启用压缩，在服务器端对文件压缩，在浏览器对文件进行解压缩。可以对html，css，js文件启用GZip压缩可达到较好的效果。 \n   - CSS放在页面的最上面，JS放在页面最下面。css直接渲染，js会执行，如果时间长会阻塞整个页面，造成缓慢。 \n   - 减少Cookie的传输。静态资源的访问，可以使用独立域名访问，避免请求静态资源时发送cookie。 \n2. CDN加速 \n3. 反向代理，通过配置缓存的功能加速web请求。负载均衡，也可以热门信息缓存在反向代理服务器上，如果更新的话就通知缓存失效。 \n\n二、应用服务器性能优化，主要有缓存，集群，异步等。 \n\n1. 分布式缓存，缓存可以存在浏览器，应用服务器和数据库服务器中。既可以对数据缓存，也可以对文件进行缓存，还可以对页面片段进行缓存。 \n\n   - 缓存的基本原理，缓存就是将数据存储在相对较高访问速度的存储介质中 \n   - 合理使用缓存，一般来说数据的读写比为2：1以上使用缓存才有意义。缓存系统启动时就把热点数据加载好，这个缓存预加载手段叫做缓存预热。缓存穿透，一个简单的对策是将不存在的数据也缓存起来。 \n   - 分布式缓存架构。应用程序通过一致性hash等路由算法选择缓存服务器远程访问缓存数据，缓存服务器之间不通信。 \n   - Memcached，分布式服务器远程通信需要考虑两方面的要素，一个是通信协议，一个是通信序列化协议。 \n\n2. 异步操作 \n\n   加入消息队列，消息队列既能解耦，又能削峰。将短时间宝并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。 \n\n3. 使用集群 \n\n   使用负载均衡技术为一个应用构建一个由多台服务器组成的服务器集群，将并发访问骑牛分发到多台服务器上处理。避免单一服务器因负载压力过大而相应缓慢。 \n\n4. 代码优化 \n\n   - 多线程处理，线程安全解决办法，1.将对象设计成无状态，这样在多线程并发访问的时候就不会出现状态不一致的情况，servlet对象的设计为无状态的对象。web开发中常用的贫血模型对象都是无状态对象，不过从面向对象的设计角度看的话，无状态对象是一种不良的设计。2.使用局部对象。3.加锁 \n   - 资源复用。减少开销很大的系统资源的创建和销毁，比如数据库连接，网络通信连接，线程，复杂对象等。资源复用主要有两种模式：单例和对象池。 \n   - 数据结构。一般的Hash算法是Time33算法，对字符串逐字符迭代乘以33，求得Hash值，hash(i) = hash(i-1) * 33 + str[i]    比如 AA 的 hashcode 是2210  AB的hashcode 是2211 。一个可行的方案是对字符串取信息指纹，再对信息求hashcode，原始字符串->MD5->hash计算 \n   - 垃圾回收 \n\n三、存储性能优化 \n\n​\tB+树和LSM树：一般的NoSql产品采用LSM树作为主要的数据结构。LSM树可以看做是一个N阶合并树。        \n\n​\tRAID vs HDFS：HDFS以块为单位管理文件内容，一个文件被分割成若干个Block。每写完一个Block，HDFS就将其自动复制到另外两台机器上，保证每个Block有三个副本。当对文件进行处理计算时，通过MapReduce并发计算任务框架，启动多个计算子任务。 ","slug":"简单的性能优化","published":1,"updated":"2018-05-21T13:17:38.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4ev75k000i60nb33l2mn72","content":"<p>一、Web前端性能优化</p>\n<ol>\n<li><p>浏览器访问优化   </p>\n<ul>\n<li>减少http请求，主要是合并css，合并js，合并图片，浏览器一次访问的js，css合并成一个文件，多张图片合并成一张，如果每张图片有不通的超链接，可通过css偏移响应鼠标点击操作，构造不通的URL 。<a id=\"more\"></a> </li>\n<li>使用浏览器缓存，通过设置http头中的Cache-Control 和 Expires 的属性，可以缓存js，css，logo，图标这种更新频率比较低的静态资源，并设置缓存天数。如果静态资源文件变化需要及时的应用到客户端浏览器的时候可以通过改变文件名来实现，即更新一个文件而不是更新文件的内容。 </li>\n<li>启用压缩，在服务器端对文件压缩，在浏览器对文件进行解压缩。可以对html，css，js文件启用GZip压缩可达到较好的效果。 </li>\n<li>CSS放在页面的最上面，JS放在页面最下面。css直接渲染，js会执行，如果时间长会阻塞整个页面，造成缓慢。 </li>\n<li>减少Cookie的传输。静态资源的访问，可以使用独立域名访问，避免请求静态资源时发送cookie。 </li>\n</ul>\n</li>\n<li>CDN加速 </li>\n<li>反向代理，通过配置缓存的功能加速web请求。负载均衡，也可以热门信息缓存在反向代理服务器上，如果更新的话就通知缓存失效。 </li>\n</ol>\n<p>二、应用服务器性能优化，主要有缓存，集群，异步等。 </p>\n<ol>\n<li><p>分布式缓存，缓存可以存在浏览器，应用服务器和数据库服务器中。既可以对数据缓存，也可以对文件进行缓存，还可以对页面片段进行缓存。 </p>\n<ul>\n<li>缓存的基本原理，缓存就是将数据存储在相对较高访问速度的存储介质中 </li>\n<li>合理使用缓存，一般来说数据的读写比为2：1以上使用缓存才有意义。缓存系统启动时就把热点数据加载好，这个缓存预加载手段叫做缓存预热。缓存穿透，一个简单的对策是将不存在的数据也缓存起来。 </li>\n<li>分布式缓存架构。应用程序通过一致性hash等路由算法选择缓存服务器远程访问缓存数据，缓存服务器之间不通信。 </li>\n<li>Memcached，分布式服务器远程通信需要考虑两方面的要素，一个是通信协议，一个是通信序列化协议。 </li>\n</ul>\n</li>\n<li><p>异步操作 </p>\n<p>加入消息队列，消息队列既能解耦，又能削峰。将短时间宝并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。 </p>\n</li>\n<li><p>使用集群 </p>\n<p>使用负载均衡技术为一个应用构建一个由多台服务器组成的服务器集群，将并发访问骑牛分发到多台服务器上处理。避免单一服务器因负载压力过大而相应缓慢。 </p>\n</li>\n<li><p>代码优化 </p>\n<ul>\n<li>多线程处理，线程安全解决办法，1.将对象设计成无状态，这样在多线程并发访问的时候就不会出现状态不一致的情况，servlet对象的设计为无状态的对象。web开发中常用的贫血模型对象都是无状态对象，不过从面向对象的设计角度看的话，无状态对象是一种不良的设计。2.使用局部对象。3.加锁 </li>\n<li>资源复用。减少开销很大的系统资源的创建和销毁，比如数据库连接，网络通信连接，线程，复杂对象等。资源复用主要有两种模式：单例和对象池。 </li>\n<li>数据结构。一般的Hash算法是Time33算法，对字符串逐字符迭代乘以33，求得Hash值，hash(i) = hash(i-1) * 33 + str[i]    比如 AA 的 hashcode 是2210  AB的hashcode 是2211 。一个可行的方案是对字符串取信息指纹，再对信息求hashcode，原始字符串-&gt;MD5-&gt;hash计算 </li>\n<li>垃圾回收 </li>\n</ul>\n</li>\n</ol>\n<p>三、存储性能优化 </p>\n<p>​    B+树和LSM树：一般的NoSql产品采用LSM树作为主要的数据结构。LSM树可以看做是一个N阶合并树。        </p>\n<p>​    RAID vs HDFS：HDFS以块为单位管理文件内容，一个文件被分割成若干个Block。每写完一个Block，HDFS就将其自动复制到另外两台机器上，保证每个Block有三个副本。当对文件进行处理计算时，通过MapReduce并发计算任务框架，启动多个计算子任务。 </p>\n","site":{"data":{}},"excerpt":"<p>一、Web前端性能优化</p>\n<ol>\n<li><p>浏览器访问优化   </p>\n<ul>\n<li>减少http请求，主要是合并css，合并js，合并图片，浏览器一次访问的js，css合并成一个文件，多张图片合并成一张，如果每张图片有不通的超链接，可通过css偏移响应鼠标点击操作，构造不通的URL 。","more":"</li>\n<li>使用浏览器缓存，通过设置http头中的Cache-Control 和 Expires 的属性，可以缓存js，css，logo，图标这种更新频率比较低的静态资源，并设置缓存天数。如果静态资源文件变化需要及时的应用到客户端浏览器的时候可以通过改变文件名来实现，即更新一个文件而不是更新文件的内容。 </li>\n<li>启用压缩，在服务器端对文件压缩，在浏览器对文件进行解压缩。可以对html，css，js文件启用GZip压缩可达到较好的效果。 </li>\n<li>CSS放在页面的最上面，JS放在页面最下面。css直接渲染，js会执行，如果时间长会阻塞整个页面，造成缓慢。 </li>\n<li>减少Cookie的传输。静态资源的访问，可以使用独立域名访问，避免请求静态资源时发送cookie。 </li>\n</ul>\n</li>\n<li>CDN加速 </li>\n<li>反向代理，通过配置缓存的功能加速web请求。负载均衡，也可以热门信息缓存在反向代理服务器上，如果更新的话就通知缓存失效。 </li>\n</ol>\n<p>二、应用服务器性能优化，主要有缓存，集群，异步等。 </p>\n<ol>\n<li><p>分布式缓存，缓存可以存在浏览器，应用服务器和数据库服务器中。既可以对数据缓存，也可以对文件进行缓存，还可以对页面片段进行缓存。 </p>\n<ul>\n<li>缓存的基本原理，缓存就是将数据存储在相对较高访问速度的存储介质中 </li>\n<li>合理使用缓存，一般来说数据的读写比为2：1以上使用缓存才有意义。缓存系统启动时就把热点数据加载好，这个缓存预加载手段叫做缓存预热。缓存穿透，一个简单的对策是将不存在的数据也缓存起来。 </li>\n<li>分布式缓存架构。应用程序通过一致性hash等路由算法选择缓存服务器远程访问缓存数据，缓存服务器之间不通信。 </li>\n<li>Memcached，分布式服务器远程通信需要考虑两方面的要素，一个是通信协议，一个是通信序列化协议。 </li>\n</ul>\n</li>\n<li><p>异步操作 </p>\n<p>加入消息队列，消息队列既能解耦，又能削峰。将短时间宝并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。 </p>\n</li>\n<li><p>使用集群 </p>\n<p>使用负载均衡技术为一个应用构建一个由多台服务器组成的服务器集群，将并发访问骑牛分发到多台服务器上处理。避免单一服务器因负载压力过大而相应缓慢。 </p>\n</li>\n<li><p>代码优化 </p>\n<ul>\n<li>多线程处理，线程安全解决办法，1.将对象设计成无状态，这样在多线程并发访问的时候就不会出现状态不一致的情况，servlet对象的设计为无状态的对象。web开发中常用的贫血模型对象都是无状态对象，不过从面向对象的设计角度看的话，无状态对象是一种不良的设计。2.使用局部对象。3.加锁 </li>\n<li>资源复用。减少开销很大的系统资源的创建和销毁，比如数据库连接，网络通信连接，线程，复杂对象等。资源复用主要有两种模式：单例和对象池。 </li>\n<li>数据结构。一般的Hash算法是Time33算法，对字符串逐字符迭代乘以33，求得Hash值，hash(i) = hash(i-1) * 33 + str[i]    比如 AA 的 hashcode 是2210  AB的hashcode 是2211 。一个可行的方案是对字符串取信息指纹，再对信息求hashcode，原始字符串-&gt;MD5-&gt;hash计算 </li>\n<li>垃圾回收 </li>\n</ul>\n</li>\n</ol>\n<p>三、存储性能优化 </p>\n<p>​    B+树和LSM树：一般的NoSql产品采用LSM树作为主要的数据结构。LSM树可以看做是一个N阶合并树。        </p>\n<p>​    RAID vs HDFS：HDFS以块为单位管理文件内容，一个文件被分割成若干个Block。每写完一个Block，HDFS就将其自动复制到另外两台机器上，保证每个Block有三个副本。当对文件进行处理计算时，通过MapReduce并发计算任务框架，启动多个计算子任务。 </p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy4ev73e000160nb6ycrby8z","category_id":"cjy4ev73u000560nbcpism7k6","_id":"cjy4ev74a000b60nbh3ukyw2u"},{"post_id":"cjy4ev73u000360nbzcwgoro1","category_id":"cjy4ev74a000860nbkyczda83","_id":"cjy4ev74a000f60nbregryl9o"},{"post_id":"cjy4ev74a000760nb3dhsmn5q","category_id":"cjy4ev74a000860nbkyczda83","_id":"cjy4ev74a000h60nbf3y238c5"},{"post_id":"cjy4ev75k000i60nb33l2mn72","category_id":"cjy4ev75k000j60nbj1l9zk29","_id":"cjy4ev75k000m60nbqsafbjzk"}],"PostTag":[{"post_id":"cjy4ev73e000160nb6ycrby8z","tag_id":"cjy4ev74a000660nbzlt4ja97","_id":"cjy4ev74a000a60nbhhvmc00a"},{"post_id":"cjy4ev73u000360nbzcwgoro1","tag_id":"cjy4ev74a000960nboafnk5uz","_id":"cjy4ev74a000e60nbpv7ouy2l"},{"post_id":"cjy4ev74a000760nb3dhsmn5q","tag_id":"cjy4ev74a000d60nb8t7pa8w6","_id":"cjy4ev74a000g60nbe2xudxoo"},{"post_id":"cjy4ev75k000i60nb33l2mn72","tag_id":"cjy4ev75k000k60nb3kmppj26","_id":"cjy4ev75k000l60nbx67vdjav"}],"Tag":[{"name":"个人记录","_id":"cjy4ev74a000660nbzlt4ja97"},{"name":"java基础","_id":"cjy4ev74a000960nboafnk5uz"},{"name":"多线程","_id":"cjy4ev74a000d60nb8t7pa8w6"},{"name":"性能优化","_id":"cjy4ev75k000k60nb3kmppj26"}]}}